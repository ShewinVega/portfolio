---
import { SectionLayout } from "@src/layouts";

const navItems = [
    {
        title: "Proyectos",
        label: "projects",
        url: "#projects",
    },
    {
        title: "Sobre m√≠",
        label: "aboutUs",
        url: "/#aboutUs",
    },
    {
        title: "Contacto",
        label: "contact",
        url: "mailto:edwinvega201196@gmail.com",
    },
];
---

<header
    class="fixed top-0 z-10 flex justify-center items-center w-full mx-auto mt-2"
>
    <nav
        id="header-nav"
        class="flex px-3 font-medium rounded-full items-center justify-center"
    >
        {
            navItems.map(({ title, label, url }) => (
                <a
                    class=" text-white text-h4 relative block px-2 py-2 transition hover:text-blue-500"
                    aria-label={label}
                    href={url}
                >
                    {title}
                </a>
            ))
        }
    </nav>
</header>

<script>
    // Change the navbar background color
    const navbarElement = document.getElementById("header-nav");
    window.addEventListener("scroll", () => {
        if (window.scrollY > 50) {
            navbarElement?.classList.add("bg-gray-800");
        } else {
            navbarElement?.classList.remove("bg-gray-800");
        }
    });

    // Change the text color
    window.addEventListener("astro:page-loaded", () => {
        const sectionsLoaded = document.querySelectorAll("section");
        const navItemsLoaded = document.querySelectorAll("header nav a");
        const isMobile = window.innerWidth <= 768;

        const callBack = (entries: any[]) => {
            entries.forEach((entry) => {
                if (entry.isIntersecting) {
                    navItemsLoaded.forEach((item) => {
                        if (
                            item.getAttribute("aria-label") === entry.target.id
                        ) {
                            item.classList.add("text-blue-500");
                        } else {
                            item.classList.remove("text-blue-500");
                        }
                    });
                }
            });
        };

        // Add the observable
        const observer = new IntersectionObserver(callBack, {
            root: null,
            rootMargin: "0px",
            threshold: isMobile ? 0.3 : 0.6,
        });

        // adding observer to setions
        sectionsLoaded.forEach((section: any) => {
            observer.observe(section);
        });

        // CleanUp function
        document.onvisibilitychange = () => {
            if (document.visibilityState === "hidden") {
                observer.disconnect();
            } else {
                sectionsLoaded.forEach((section) => {
                    observer.observe(section);
                });
            }
        };
    });
</script>

<!-- <style>
    nav {
        animation: nav-shadown is linear both;
        animation-timeline: scroll();
        animation-range: 0 100px;
    }

    @keyframes nav-shadow {
        0% {
            @apply tw:bg-gray-800/0 tw:bg-white/0;
        }
        to {
            @apply shadow-lg ring-1 backdrop-blur ring-white/10;
        }
    }
</style> -->
